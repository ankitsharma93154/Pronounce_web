{"version":3,"file":"static/js/316.3aaff168.chunk.js","mappings":"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","sources":["components/wordOfDay.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback, memo } from \"react\";\r\nimport { Volume2 } from \"lucide-react\";\r\n\r\nconst API_URL = \"https://word-of-day.vercel.app/\";\r\n\r\n// Memoized difficulty class function\r\nconst getDifficultyClass = (difficulty) => {\r\n  switch (difficulty) {\r\n    case \"beginner\":\r\n      return \"difficulty-beginner\";\r\n    case \"intermediate\":\r\n      return \"difficulty-intermediate\";\r\n    case \"advanced\":\r\n      return \"difficulty-advanced\";\r\n    default:\r\n      return \"difficulty-default\";\r\n  }\r\n};\r\n\r\n// Memoized date formatter\r\nconst formatDate = (dateString) => {\r\n  const options = { month: \"long\", day: \"numeric\", year: \"numeric\" };\r\n  return new Date(dateString).toLocaleDateString(undefined, options);\r\n};\r\n\r\n// Memoized accent badges component\r\nconst AccentBadges = memo(() => (\r\n  <div className=\"accent-options\">\r\n    <span className=\"accent-badge\">US ðŸ‡ºðŸ‡¸</span>\r\n    <span className=\"accent-badge\">UK ðŸ‡¬ðŸ‡§</span>\r\n    <span className=\"accent-badge\">AU ðŸ‡¦ðŸ‡º</span>\r\n    <span className=\"accent-badge\">IN ðŸ‡®ðŸ‡³</span>\r\n  </div>\r\n));\r\n\r\n// Memoized loading component\r\nconst LoadingSpinner = memo(() => (\r\n  <div className=\"word-of-day-loading\">\r\n    <div className=\"loading-spinner\"></div>\r\n  </div>\r\n));\r\n\r\n// Memoized error component\r\nconst ErrorDisplay = memo(({ message }) => (\r\n  <div className=\"word-of-day-error\">{message}</div>\r\n));\r\n\r\n// Memoized empty state component\r\nconst EmptyState = memo(() => (\r\n  <div className=\"word-of-day-empty\">No word of the day available.</div>\r\n));\r\n\r\n// Main component\r\nconst WordOfDay = memo(({ pronounce }) => {\r\n  const [wordData, setWordData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Memoized API call using fetch instead of axios\r\n  const fetchWordOfDay = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(`${API_URL}get-wordofday`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setWordData(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(\"Failed to load word of the day\");\r\n      console.error(\"Error fetching word of the day:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchWordOfDay();\r\n  }, [fetchWordOfDay]);\r\n\r\n  // Memoized handlePronounce function\r\n  const handlePronounce = useCallback(() => {\r\n    if (wordData?.word) {\r\n      pronounce(wordData.word);\r\n    }\r\n  }, [wordData?.word, pronounce]);\r\n\r\n  // Memoized difficulty class\r\n  const difficultyClass = useMemo(() => {\r\n    if (!wordData) return \"\";\r\n    return getDifficultyClass(wordData.difficulty);\r\n  }, [wordData]);\r\n\r\n  // Memoized formatted date\r\n  const formattedDate = useMemo(() => {\r\n    if (!wordData?.display_date) return \"\";\r\n    return formatDate(wordData.display_date);\r\n  }, [wordData?.display_date]);\r\n\r\n  if (loading) return <LoadingSpinner />;\r\n  if (error) return <ErrorDisplay message={error} />;\r\n  if (!wordData) return <EmptyState />;\r\n\r\n  return (\r\n    <div className=\"word-of-day-container\">\r\n      <div className=\"word-of-day-badge\">NEW</div>\r\n      <div className=\"word-of-day-header\">\r\n        <div className=\"word-of-day-title\">\r\n          <span>ðŸ“… Word of the Day</span>\r\n        </div>\r\n        <div className=\"word-of-day-date\">{formattedDate}</div>\r\n      </div>\r\n\r\n      <div className=\"word-of-day-content\">\r\n        <div className=\"word-of-day-left\">\r\n          <div className=\"word-main\">\r\n            <span className=\"word-of-day-word\">{wordData.word}</span>\r\n            <span className=\"word-of-day-pos\">{wordData.part_of_speech}</span>\r\n            <span className={`difficulty-badge ${difficultyClass}`}>\r\n              {wordData.difficulty}\r\n            </span>\r\n          </div>\r\n          <div className=\"word-of-day-phonetic\">{wordData.phonetic}</div>\r\n          <div className=\"word-of-day-definition\">{wordData.definition}</div>\r\n          <div className=\"word-of-day-example\">\r\n            \"{wordData.example_sentence}\"\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"word-of-day-right\">\r\n          <button\r\n            onClick={handlePronounce}\r\n            className=\"listen-button\"\r\n            aria-label=\"Listen to pronunciation\"\r\n          >\r\n            <Volume2 className=\"icon\" />\r\n            <span>Listen</span>\r\n          </button>\r\n          <div className=\"accent-container\">\r\n            <div className=\"accent-title\">Available in:</div>\r\n            <AccentBadges />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default WordOfDay;\r\n"],"names":["AccentBadges","memo","_jsxs","className","children","_jsx","LoadingSpinner","ErrorDisplay","_ref","message","EmptyState","_ref2","pronounce","wordData","setWordData","useState","loading","setLoading","error","setError","fetchWordOfDay","useCallback","async","response","fetch","ok","Error","status","data","json","err","console","useEffect","handlePronounce","word","difficultyClass","useMemo","difficulty","getDifficultyClass","formattedDate","display_date","dateString","Date","toLocaleDateString","undefined","month","day","year","part_of_speech","phonetic","definition","example_sentence","onClick","Volume2"],"sourceRoot":""}